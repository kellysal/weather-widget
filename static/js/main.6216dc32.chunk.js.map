{"version":3,"sources":["components/Header/index.js","components/Form/index.js","components/Weather/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Form","props","onSubmit","getWeather","type","name","placeholder","autocomplete","Weather","city","country","temperature","humidity","description","error","require","config","API_KEY","process","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","Math","round","main","temp","sys","weather","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8SASeA,EAPA,kBACX,6BACI,wBAAIC,UAAU,2BAAd,kBACA,uBAAGA,UAAU,8BAAb,+CCKOC,EARF,SAAAC,GAAK,OACd,0BAAMC,SAAUD,EAAME,YAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,aAAaC,aAAa,QACrE,2BAAOH,KAAK,OAAOC,KAAK,UAAUC,YAAY,gBAAgBC,aAAa,QAC3E,0DCOOC,EAXC,SAAAP,GAAK,OACjB,yBAAKF,UAAU,iBACVE,EAAMQ,MAAQR,EAAMQ,MAAQ,uBAAGV,UAAU,gBAAb,aAAsC,0BAAMA,UAAU,kBAAkBE,EAAMQ,KAAxC,KAAgDR,EAAMS,UACxHT,EAAMU,aAAe,uBAAGZ,UAAU,gBAAb,gBAAyC,0BAAMA,UAAU,kBAAkBE,EAAMU,YAAxC,WAC9DV,EAAMW,UAAY,uBAAGb,UAAU,gBAAb,aAAsC,0BAAMA,UAAU,kBAAkBE,EAAMW,SAAxC,MACxDX,EAAMY,aAAe,uBAAGd,UAAU,gBAAb,eAAwC,0BAAMA,UAAU,kBAAkBE,EAAMY,cACrGZ,EAAMa,OAAS,uBAAGf,UAAU,kBAAkBE,EAAMa,SCH7DC,EAAQ,IAAUC,SAElB,IAAMC,EAAUC,mCAyEDC,E,2MAtEbC,MAAQ,CACNT,iBAAaU,EACbZ,UAAMY,EACNX,aAASW,EACTT,cAAUS,EACVR,iBAAaQ,EACbP,WAAOO,G,EAGTlB,W,uCAAa,WAAOmB,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBAEIf,EAAOa,EAAEG,OAAOC,SAASjB,KAAKkB,MAC9BjB,EAAUY,EAAEG,OAAOC,SAAShB,QAAQiB,MAJ/B,SAMYC,MAAM,qDAAD,OAAsDnB,EAAtD,YAA8DC,EAA9D,kBAA+EO,EAA/E,oBANjB,cAMLY,EANK,gBAOQA,EAASC,OAPjB,OAOLC,EAPK,OASPtB,GAAQC,GACVsB,QAAQC,IAAIF,GAEZ,EAAKG,SAAS,CACZvB,YAAawB,KAAKC,MAAML,EAAKM,KAAKC,MAClC7B,KAAMsB,EAAK1B,KACXK,QAASqB,EAAKQ,IAAI7B,QAClBE,SAAUmB,EAAKM,KAAKzB,SACpBC,YAAakB,EAAKS,QAAQ,GAAG3B,YAC7BC,MAAO,MAIT,EAAKoB,SAAS,CACZvB,iBAAaU,EACbZ,UAAMY,EACNX,aAASW,EACTT,cAAUS,EACVR,iBAAaQ,EACbP,MAAO,gCA5BA,4C,8HAkCX,OACE,6BACE,yBAAKf,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,8BACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMI,WAAYsC,KAAKtC,aACvB,kBAAC,EAAD,CACEQ,YAAa8B,KAAKrB,MAAMT,YACxBF,KAAMgC,KAAKrB,MAAMX,KACjBC,QAAS+B,KAAKrB,MAAMV,QACpBE,SAAU6B,KAAKrB,MAAMR,SACrBC,YAAa4B,KAAKrB,MAAMP,YACxBC,MAAO2B,KAAKrB,MAAMN,kB,GA3DpB4B,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6216dc32.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => (\n    <div>\n        <h1 className=\"header-container__title\">Weather Widget</h1>\n        <p className=\"header-container__subtitle\">Enter city and county for current weather</p>\n    </div>\n);\n\nexport default Header;","import React from \"react\";\n\nconst Form = props => (\n    <form onSubmit={props.getWeather} >\n        <input type=\"text\" name=\"city\" placeholder=\"Enter City\" autocomplete=\"off\" />\n        <input type=\"text\" name=\"country\" placeholder=\"Enter Country\" autocomplete=\"off\" />\n        <button>Get Current Weather!</button>\n    </form>\n);\n\nexport default Form;","import React from \"react\";\n\nconst Weather = props => (\n    <div className=\"weather__info\">\n        {props.city && props.city && <p className=\"weather__key\">Location: <span className=\"weather__value\">{props.city}, {props.country}</span></p>}\n        {props.temperature && <p className=\"weather__key\">Temperature: <span className=\"weather__value\">{props.temperature}â„‰</span></p>}\n        {props.humidity && <p className=\"weather__key\">Humidity: <span className=\"weather__value\">{props.humidity}%</span></p>}\n        {props.description && <p className=\"weather__key\">Conditions: <span className=\"weather__value\">{props.description}</span></p>}\n        {props.error && <p className=\"weather__error\">{props.error}</p>}\n    </div>\n\n);\n\nexport default Weather;","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nrequire(\"dotenv\").config();\n\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=imperial`);\n    const data = await api_call.json();\n\n    if (city && country) {\n      console.log(data);\n\n      this.setState({\n        temperature: Math.round(data.main.temp),\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      });\n\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter city & country\"\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-md-12 header-container\">\n                  <Header />\n                  <Form getWeather={this.getWeather} />\n                  <Weather\n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    country={this.state.country}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}